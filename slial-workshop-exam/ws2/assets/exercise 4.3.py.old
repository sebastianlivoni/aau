import numpy as np

alpha = 0.85

# p1 = np.array([
#   [0,1/2,0,1/7,0,0,1/7],
#   [0,0,1/3,1/7,1/2,0,1/7],
#   [1,0,0,1/7,0,1/3,1/7],
#   [0,0,1/3,1/7,0,0,1/7],
#   [0,1/2,0,1/7,0,1/3,1/7],
#   [0,0,1/3,1/7,1/2,0,1/7],
#   [0,0,0,1/7,0,1/3,1/7]
# ])

p1 = np.array([
  [0,0,0,1/4,0,1/2,1/3],
  [0,0,0,1/4,0,0,0,],
  [0,1/2,0,0,1,0,0],
  [1,1/2,0,0,0,1/2,1/3],
  [0,0,1,0,0,0,1/3],
  [0,0,0,1/4,0,0,0],
  [0,0,0,1/4,0,0,0]
])

p2 = np.array([
  [1/7,1/7,1/7,1/7,1/7,1/7,1/7],
  [1/7,1/7,1/7,1/7,1/7,1/7,1/7],
  [1/7,1/7,1/7,1/7,1/7,1/7,1/7],
  [1/7,1/7,1/7,1/7,1/7,1/7,1/7],
  [1/7,1/7,1/7,1/7,1/7,1/7,1/7],
  [1/7,1/7,1/7,1/7,1/7,1/7,1/7],
  [1/7,1/7,1/7,1/7,1/7,1/7,1/7]
])

P = alpha * p1 + (1 - alpha) * p2

# https://stackoverflow.com/questions/52137856/steady-state-probabilities-markov-chain-python-implementation
def Markov_Steady_State_Prop(p):
  p = p - np.eye(p.shape[0])
  for ii in range(p.shape[0]):
      p[0,ii] = 1
  
  P0 = np.zeros((p.shape[0],1))    
  P0[0] = 1
  return np.matmul(np.linalg.inv(p),P0)
  
q = np.array(Markov_Steady_State_Prop(P))

print("Steady-state vector:\n", q)